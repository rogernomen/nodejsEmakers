{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh16520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs28 \cf0 Formato de la API
\f1\b0\fs24 \
\
\

\f0\b\fs26 1. Peticiones
\f1\b0\fs24 \
\
Todas las peticiones se hacen por HTTPS.\
\
Todas las peticiones deben incluir autenticaci\'f3n b\'e1sica con la cabecera 'Authentication: Basic usuario:password' donde usuario:password est\'e1 en base64.\
\
Las peticiones POST y PUT deben incluir la cabecera 'Content-Type: application/json' y un cuerpo en formato JSON.\
\
\
\

\f0\b\fs26 2. Nombres de las URLs
\f1\b0\fs24 \
\
En general una URL lleva el nombre de una colecci\'f3n o un recurso dentro de ella: /itinerarios /repartidores/7\
\
Las acciones sobre colecciones o recursos anexan el nombre de la acci\'f3n a la URL: /repartidores/12/enviarNotificacion /itinerarios/5/stop\
\
Las acciones no relacionadas con una colecci\'f3n o recurso van en la ra\'edz: /login /estadoRed\
\
\
\

\f0\b\fs26 3. Peticiones CRUD (Create Read Update Delete)
\f1\b0\fs24 \
\
Las operaciones de lectura, creaci\'f3n, modificaci\'f3n, sustituci\'f3n y borrado de colecciones y recursos se implementan con peticiones GET, POST, PUT y DELETE. Por supuesto s\'f3lo se implementan aquellas operaciones que se necesitan, p.ej. casi nunca se implementa el borrado de una colecci\'f3n entera.\
\
La lectura se hace con el m\'e9todo GET:\
\
	- Obtener toda una colecci\'f3n: GET /ciudades\
\
	- Obtener un recurso: GET /ciudades/1\
\
	- Obtener varios recursos: GET /ciudades/6,7,8\
\
La creaci\'f3n/modificaci\'f3n se hace con el m\'e9todo POST:\
\
	- Crear un recurso: POST /repartidores (con un JSON con el itinerario a crear, donde los campos no incluidos se dejar\'e1n a null).\
\
	- Modificar un recurso: POST /repartidores/5 (con un JSON con s\'f3lo los campos a cambiar, los dem\'e1s no se tocan).\
\
	- Crear varios recursos a la vez: POST /repartidores (con un JSON con un array de objetos en vez de s\'f3lo uno).\
\
	- Modificar varios recursos a la vez: POST /repartidores/3,4,5 (con un JSON con un array de objetos en vez de s\'f3lo uno).\
\
La sustituci\'f3n se hace con el m\'e9todo PUT:\
\
	- Sustituir un recurso: PUT /itinerarios/5 (con un JSON con el nuevo objeto, donde los campos no incluidos se dejar\'e1n a null).\
\
	- Sustituir varios recursos a la vez: PUT /itinerarios/7,8 (con un JSON con un array de objetos en vez de s\'f3lo uno).\
\
El borrado se hace con el m\'e9todo DELETE:\
\
	- Borrar una colecci\'f3n entera: DELETE /itinerarios\
\
	- Borrar un recurso: DELETE /itinerarios/9\
\
	- Borrar varios recursos: DELETE /itinerarios/9,10,11\
\
\

\f0\b\fs26 4. Otras peticiones
\f1\b0\fs24 \
\
Las operaciones no CRUD se implementan con peticiones GET o POST dependiendo de si se necesita un JSON adicional o no:\
\
	- Cuando s\'f3lo se necesita el nombre de la operaci\'f3n se usa GET: GET /itinerarios/3/start\
\
	- Cuando la operaci\'f3n requiere datos adicionales se usa POST: POST /login (y un JSON con informaci\'f3n adicional como p.ej. el tel\'e9fono que se lleva el repartidor ese d\'eda).\
\
\
\

\f0\b\fs26 5. Par\'e1metros de las peticiones
\f1\b0\fs24 \
\
Todas las peticiones pueden llevar par\'e1metros adicionales en la URL si lo necesitan, p.ej. /itinerarios?filtro[repartidor]=14&orden[fecha]=desc&limite[max]=100 devuelve los \'faltimos 100 itinerarios del repartidor 14 ordenados de m\'e1s reciente a m\'e1s antiguo.\
\
Los par\'e1metros m\'e1s habituales son el filtrado, la ordenaci\'f3n y el l\'edmite/paginaci\'f3n. Se recomienda implementarlos siempre igual:\
\
	- Filtrado: un par\'e1metro 'filtro' con los campos y valores a filtrar, p.ej. /repartidores?filtro[agencia]=2&filtro[tipo]=0 devuelve todos los repartidores de la agencia 2 y tipo 0.\
\
	- Ordenaci\'f3n: un par\'e1metro 'orden' con los campos y el sentido a ordenar, p.ej. /itinerarios?orden[repartidor]=asc&orden[fecha]=desc ordena primero por repartidor ascendente y luego por fecha descendente.\
\
	- L\'edmite/paginaci\'f3n: un par\'e1metro 'limite' que limita el n\'famero de resultados, p.ej. /itinerarios?limite[min]=201&limite[max]=300 devuelve los resultados 201 a 300.\
\
Nota: los par\'e1metros complejos se han puesto con el formato parametro[campo]=valor para que Node.js lo convierta todo autom\'e1ticamente en objetos anidados.\
\
Los par\'e1metros especiales de cada petici\'f3n se implementan seg\'fan se necesite, p.ej:\
\
	- Para controlar cu\'e1nta informaci\'f3n se devuelve se puede usar /paquetes?full que lo devuelve todo pero es lento, o /paquetes?basico que devuelve menos pero es r\'e1pido.\
\
\
\

\f0\b\fs26 6. Respuestas cuando no hay errores
\f1\b0\fs24 \
\
Cuando no hay errores el servidor devuelve una respuesta con c\'f3digo HTTP 200 OK y un JSON con el resultado de la operaci\'f3n:\
\
	- En el caso de una consulta, se devuelve un array con el nombre de la colecci\'f3n que contiene los resultados. Si no hay resultados est\'e1 vac\'edo. P.ej:\
\
	\{\
		"ciudades" : [\
			\{\
				"id": 1,\
				"code": "BCN",\
				"name": "BARCELONA"\
			\},\
			\{\
				"id": 2,\
				"code": "MAD",\
				"name": "MADRID"\
			\},\
			\{\
				"id": 3,\
				"code": "EAS",\
				"name": "DONOSTIA"\
			\}\
		]\
	\}\
\
	- En el caso de creaci\'f3n, modificaci\'f3n, sustituci\'f3n y borrado se devuelve un campo que indica cu\'e1ntos objetos se han creado, modificado, etc, p.ej:\
\
	\{\
		"creados" : 4\
	\}\
\
	\{\
		"borrados" : 2\
	\}\
\
	- En el caso de otras operaciones el resultado ser\'e1 espec\'edfico de cada operaci\'f3n, pero deber\'eda seguir el formato de las dos anteriores en lo posible.\
	\
\
\

\f0\b\fs26 7. Respuestas cuando hay errores
\f1\b0\fs24 \
\
Cuando hay errores la respuesta tendr\'e1 un c\'f3digo HTTP con un valor 4XX cuando el problema est\'e1 en la petici\'f3n y un c\'f3digo 5XX cuando el problema est\'e1 en el servidor:\
\
	400 Bad request: la petici\'f3n est\'e1 mal formateada, faltan campos, etc.\
\
	401 Unauthorized: las credenciales de la cabecera Authentication no son correctas.\
\
	403 Forbidden: las credenciales son correctas pero este usuario no tiene permisos para hacer esta operaci\'f3n.\
\
	404 No encontrado: la ruta pedida no existe. En cambio cuando la ruta es correcta pero hay 0 resultados la respuesta es 200 OK y un array vac\'edo.\
\
	409 Conflicto: se ha intentado crear un recurso que entra en conflicto con otro preexistente, p.ej con el mismo id \'fanico.\
\
	415 Unsupported media type: el cuerpo de la petici\'f3n en el caso de un POST o PUT no est\'e1 en formato JSON.\
\
	500 Internal server error: cuando hay un error en la BD o en otra parte del servidor.\
\
El cuerpo de la respuesta es un JSON con un array 'errores' que contiene todos los errores detectados. Cada error tiene un campo obligatorio 'estado' que contiene de nuevo el estado HTTP devuelto, un campo obligatorio 'codigo' con el c\'f3digo del error y un campo opcional 'mensaje' que detalla m\'e1s el error. Lo m\'e1s habitual es que el array contenga s\'f3lo un error, pero p.ej. en el caso de 400 Bad request puede que se hayan detectado varios problemas en la petici\'f3n. Ejemplo:\
\
	\{\
		"errores" : [\
			\{\
				"estado" : 500,\
				"codigo" : Error interno,\
				"mensaje" : Error al conectar a la base de datos\
			\}\
		]\
	\}\
\
}